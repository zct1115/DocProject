package com.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.greendao.entity.Cupboard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUPBOARD".
*/
public class CupboardDao extends AbstractDao<Cupboard, Long> {

    public static final String TABLENAME = "CUPBOARD";

    /**
     * Properties of entity Cupboard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Location = new Property(3, String.class, "location", false, "LOCATION");
        public final static Property StoreroomName = new Property(4, String.class, "storeroomName", false, "STOREROOM_NAME");
        public final static Property StoreroomCode = new Property(5, String.class, "storeroomCode", false, "STOREROOM_CODE");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
    }


    public CupboardDao(DaoConfig config) {
        super(config);
    }
    
    public CupboardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUPBOARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CODE\" TEXT," + // 1: code
                "\"NAME\" TEXT," + // 2: name
                "\"LOCATION\" TEXT," + // 3: location
                "\"STOREROOM_NAME\" TEXT," + // 4: storeroomName
                "\"STOREROOM_CODE\" TEXT," + // 5: storeroomCode
                "\"REMARK\" TEXT);"); // 6: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUPBOARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cupboard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(4, location);
        }
 
        String storeroomName = entity.getStoreroomName();
        if (storeroomName != null) {
            stmt.bindString(5, storeroomName);
        }
 
        String storeroomCode = entity.getStoreroomCode();
        if (storeroomCode != null) {
            stmt.bindString(6, storeroomCode);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cupboard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(4, location);
        }
 
        String storeroomName = entity.getStoreroomName();
        if (storeroomName != null) {
            stmt.bindString(5, storeroomName);
        }
 
        String storeroomCode = entity.getStoreroomCode();
        if (storeroomCode != null) {
            stmt.bindString(6, storeroomCode);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Cupboard readEntity(Cursor cursor, int offset) {
        Cupboard entity = new Cupboard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // location
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // storeroomName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // storeroomCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cupboard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStoreroomName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStoreroomCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cupboard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cupboard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cupboard entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
