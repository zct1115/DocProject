package com.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.greendao.entity.Humiture;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HUMITURE".
*/
public class HumitureDao extends AbstractDao<Humiture, Long> {

    public static final String TABLENAME = "HUMITURE";

    /**
     * Properties of entity Humiture.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CheckData = new Property(1, String.class, "checkData", false, "CHECK_DATA");
        public final static Property AmTemp = new Property(2, String.class, "AmTemp", false, "AM_TEMP");
        public final static Property AmHumidity = new Property(3, String.class, "AmHumidity", false, "AM_HUMIDITY");
        public final static Property PmTemp = new Property(4, String.class, "PmTemp", false, "PM_TEMP");
        public final static Property PmHumidity = new Property(5, String.class, "PmHumidity", false, "PM_HUMIDITY");
        public final static Property InTemp = new Property(6, String.class, "inTemp", false, "IN_TEMP");
        public final static Property InHumidity = new Property(7, String.class, "inHumidity", false, "IN_HUMIDITY");
        public final static Property OutTemp = new Property(8, String.class, "outTemp", false, "OUT_TEMP");
        public final static Property OutHumidity = new Property(9, String.class, "outHumidity", false, "OUT_HUMIDITY");
        public final static Property Taken = new Property(10, String.class, "Taken", false, "TAKEN");
        public final static Property Custodian = new Property(11, String.class, "custodian", false, "CUSTODIAN");
        public final static Property Remark = new Property(12, String.class, "remark", false, "REMARK");
    }


    public HumitureDao(DaoConfig config) {
        super(config);
    }
    
    public HumitureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HUMITURE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CHECK_DATA\" TEXT," + // 1: checkData
                "\"AM_TEMP\" TEXT," + // 2: AmTemp
                "\"AM_HUMIDITY\" TEXT," + // 3: AmHumidity
                "\"PM_TEMP\" TEXT," + // 4: PmTemp
                "\"PM_HUMIDITY\" TEXT," + // 5: PmHumidity
                "\"IN_TEMP\" TEXT," + // 6: inTemp
                "\"IN_HUMIDITY\" TEXT," + // 7: inHumidity
                "\"OUT_TEMP\" TEXT," + // 8: outTemp
                "\"OUT_HUMIDITY\" TEXT," + // 9: outHumidity
                "\"TAKEN\" TEXT," + // 10: Taken
                "\"CUSTODIAN\" TEXT," + // 11: custodian
                "\"REMARK\" TEXT);"); // 12: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HUMITURE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Humiture entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String checkData = entity.getCheckData();
        if (checkData != null) {
            stmt.bindString(2, checkData);
        }
 
        String AmTemp = entity.getAmTemp();
        if (AmTemp != null) {
            stmt.bindString(3, AmTemp);
        }
 
        String AmHumidity = entity.getAmHumidity();
        if (AmHumidity != null) {
            stmt.bindString(4, AmHumidity);
        }
 
        String PmTemp = entity.getPmTemp();
        if (PmTemp != null) {
            stmt.bindString(5, PmTemp);
        }
 
        String PmHumidity = entity.getPmHumidity();
        if (PmHumidity != null) {
            stmt.bindString(6, PmHumidity);
        }
 
        String inTemp = entity.getInTemp();
        if (inTemp != null) {
            stmt.bindString(7, inTemp);
        }
 
        String inHumidity = entity.getInHumidity();
        if (inHumidity != null) {
            stmt.bindString(8, inHumidity);
        }
 
        String outTemp = entity.getOutTemp();
        if (outTemp != null) {
            stmt.bindString(9, outTemp);
        }
 
        String outHumidity = entity.getOutHumidity();
        if (outHumidity != null) {
            stmt.bindString(10, outHumidity);
        }
 
        String Taken = entity.getTaken();
        if (Taken != null) {
            stmt.bindString(11, Taken);
        }
 
        String custodian = entity.getCustodian();
        if (custodian != null) {
            stmt.bindString(12, custodian);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Humiture entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String checkData = entity.getCheckData();
        if (checkData != null) {
            stmt.bindString(2, checkData);
        }
 
        String AmTemp = entity.getAmTemp();
        if (AmTemp != null) {
            stmt.bindString(3, AmTemp);
        }
 
        String AmHumidity = entity.getAmHumidity();
        if (AmHumidity != null) {
            stmt.bindString(4, AmHumidity);
        }
 
        String PmTemp = entity.getPmTemp();
        if (PmTemp != null) {
            stmt.bindString(5, PmTemp);
        }
 
        String PmHumidity = entity.getPmHumidity();
        if (PmHumidity != null) {
            stmt.bindString(6, PmHumidity);
        }
 
        String inTemp = entity.getInTemp();
        if (inTemp != null) {
            stmt.bindString(7, inTemp);
        }
 
        String inHumidity = entity.getInHumidity();
        if (inHumidity != null) {
            stmt.bindString(8, inHumidity);
        }
 
        String outTemp = entity.getOutTemp();
        if (outTemp != null) {
            stmt.bindString(9, outTemp);
        }
 
        String outHumidity = entity.getOutHumidity();
        if (outHumidity != null) {
            stmt.bindString(10, outHumidity);
        }
 
        String Taken = entity.getTaken();
        if (Taken != null) {
            stmt.bindString(11, Taken);
        }
 
        String custodian = entity.getCustodian();
        if (custodian != null) {
            stmt.bindString(12, custodian);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Humiture readEntity(Cursor cursor, int offset) {
        Humiture entity = new Humiture( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // checkData
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // AmTemp
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AmHumidity
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PmTemp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PmHumidity
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // inTemp
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // inHumidity
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // outTemp
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // outHumidity
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Taken
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // custodian
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Humiture entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCheckData(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAmTemp(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAmHumidity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPmTemp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPmHumidity(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInTemp(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInHumidity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOutTemp(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOutHumidity(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTaken(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCustodian(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRemark(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Humiture entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Humiture entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Humiture entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
